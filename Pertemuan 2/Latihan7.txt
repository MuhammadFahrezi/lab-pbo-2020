LATIHAN 7

1. Apakah perbedaan class String, StringBuffer dan StringBuilder?
2. Apakah yang dimaksud dengan sifat mutable dan immutable? Beri contoh!
3. Jelaskan operasi utama append dan insert yang dimiliki oleh StringBuffer!

JAWAB

1. 
*String = Objek dari String sering sekali kita gunakan sehari-hari, bahkan mungkin di setiap class dari Java kita
terdapat rutin yang menangani String. Class String merepresentasikan suatu teks. Class String berisi
string yang tetap (immutable string). Artinya sekali intance String dibuat maka isinya tidak bisa diubah.
Kelas String memiliki 13 konstruktor yang memungkinkan kita membuat obyek String dan
menginisialisasi nilainya dengan menggunakan berbagai macam sumber data yang berbeda.

*StringBuffer = Class StringBuffer mirip dengan String tetapi bersifat mutable, atau dapat diubah atau dimodifikasi
dengan menggunakan beberapa method yang dimilikinya. String buffer aman digunakan oleh beberapa
thread. Method-methodnya bersifat synchronized sehingga beberapa operasi yang terjadi pada suatu
obyek string buffer akan diselesaikan secara serial sesuai urutan pemanggilan.

*StringBuilder =  string yang bersifat mutable. Operasi yang dimiliki class StringBuilder mirip dengan
class StringBuffer. Perbedaannya adalah StringBuilder tidak mendukung sinkronisasi.

2.
*mutable adalah tipe data yang nilainya dapat diubah. Tipe data yang termasuk mutable adalah semua jenis tipe data yang termasuk reference type 
yang notabene merupakan objek (object literal, array, function, date, dan objek-objek lainnya). Contoh : String str : "aku";

*immutable adalah tipe data yang nilainya tetap. Tipe data immutable adalah semua tipe data yang termasuk 
primitive type (string, number, boolean, null, undefined, dan symbol). Contoh : let nama1 = 'aku'
let nama2 = nama1 + 'jelek'

3.
Method append selalu menambahkan teks diakhir string, sedang method insert menembahkan teks di posisi tertentu. Secara umum, jika sb adalah obyek dari StringBuffer, 
maka sb.append(x) sama dengan operasi sb.insert(sb.length(),x).
